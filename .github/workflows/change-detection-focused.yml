# 🔍 Change Detection Focused Workflow
# Smart analysis of repository changes with configurable patterns
# Part of the modular CI/CD architecture

name: '🔍 Change Detection Focus'

on:
  workflow_call:
    inputs:
      source-patterns:
        description: 'Source code file patterns (multi-line)'
        required: false
        type: string
        default: |
          source/**/*.cs
          source/**/*.csproj
          **/*.sln
      test-patterns:
        description: 'Test file patterns (multi-line)'
        required: false
        type: string
        default: |
          tests/**/*.cs
          tests/**/*.csproj
      config-patterns:
        description: 'Configuration file patterns (multi-line)'
        required: false
        type: string
        default: |
          *.config
          *.json
          *.yml
          *.yaml
      workflow-patterns:
        description: 'Workflow file patterns (multi-line)'
        required: false
        type: string
        default: |
          .github/workflows/**/*.yml
          .github/workflows/**/*.yaml
      generate-change-summary:
        description: 'Generate detailed change summary'
        required: false
        type: boolean
        default: true
        
    outputs:
      has-source-changes:
        description: 'Whether source code changes were detected'
        value: ${{ jobs.change-detection.outputs.has-source-changes }}
      has-test-changes:
        description: 'Whether test changes were detected'
        value: ${{ jobs.change-detection.outputs.has-test-changes }}
      has-config-changes:
        description: 'Whether config changes were detected'
        value: ${{ jobs.change-detection.outputs.has-config-changes }}
      has-workflow-changes:
        description: 'Whether workflow changes were detected'
        value: ${{ jobs.change-detection.outputs.has-workflow-changes }}
      should-publish:
        description: 'Whether changes warrant publishing'
        value: ${{ jobs.change-detection.outputs.should-publish }}
      change-summary:
        description: 'Summary of detected changes'
        value: ${{ jobs.change-detection.outputs.change-summary }}
        
  workflow_dispatch:
    inputs:
      source-patterns:
        description: 'Source code file patterns (multi-line)'
        required: false
        type: string
        default: |
          source/**/*.cs
          source/**/*.csproj
          **/*.sln
      test-patterns:
        description: 'Test file patterns (multi-line)'
        required: false
        type: string
        default: |
          tests/**/*.cs
          tests/**/*.csproj
      config-patterns:
        description: 'Configuration file patterns (multi-line)'
        required: false
        type: string
        default: |
          *.config
          *.json
          *.yml
          *.yaml
      workflow-patterns:
        description: 'Workflow file patterns (multi-line)'
        required: false
        type: string
        default: |
          .github/workflows/**/*.yml
          .github/workflows/**/*.yaml
      generate-change-summary:
        description: 'Generate detailed change summary'
        required: false
        type: boolean
        default: true

jobs:
  change-detection:
    name: '🔍 Detect Changes'
    runs-on: ubuntu-latest
    
    outputs:
      has-source-changes: ${{ steps.detect-changes.outputs.has-source-changes }}
      has-test-changes: ${{ steps.detect-changes.outputs.has-test-changes }}
      has-config-changes: ${{ steps.detect-changes.outputs.has-config-changes }}
      has-workflow-changes: ${{ steps.detect-changes.outputs.has-workflow-changes }}
      should-publish: ${{ steps.publishing-logic.outputs.should-publish }}
      change-summary: ${{ steps.change-summary.outputs.summary }}
      
    steps:
      - name: '📥 Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: '🔍 Detect File Changes'
        id: detect-changes
        run: |
          echo "::group::🔍 Analyzing repository changes"
          
          # Convert multi-line patterns to arrays
          SOURCE_PATTERNS="${{ inputs.source-patterns }}"
          TEST_PATTERNS="${{ inputs.test-patterns }}"
          CONFIG_PATTERNS="${{ inputs.config-patterns }}"
          WORKFLOW_PATTERNS="${{ inputs.workflow-patterns }}"
          
          # Function to check if files match patterns
          check_patterns() {
            local patterns="$1"
            local has_changes=false
            
            while IFS= read -r pattern; do
              [[ -z "$pattern" ]] && continue
              pattern=$(echo "$pattern" | xargs) # trim whitespace
              
              if git diff --name-only HEAD~1 HEAD | grep -E "$pattern" > /dev/null 2>&1; then
                has_changes=true
                echo "📁 Found changes matching pattern: $pattern"
                git diff --name-only HEAD~1 HEAD | grep -E "$pattern" | sed 's/^/  - /'
              fi
            done <<< "$patterns"
            
            echo "$has_changes"
          }
          
          # Check source changes
          echo "📋 Checking source code changes..."
          HAS_SOURCE_CHANGES=$(check_patterns "$SOURCE_PATTERNS")
          echo "has-source-changes=$HAS_SOURCE_CHANGES" >> $GITHUB_OUTPUT
          
          # Check test changes
          echo "📋 Checking test changes..."
          HAS_TEST_CHANGES=$(check_patterns "$TEST_PATTERNS")
          echo "has-test-changes=$HAS_TEST_CHANGES" >> $GITHUB_OUTPUT
          
          # Check config changes
          echo "📋 Checking configuration changes..."
          HAS_CONFIG_CHANGES=$(check_patterns "$CONFIG_PATTERNS")
          echo "has-config-changes=$HAS_CONFIG_CHANGES" >> $GITHUB_OUTPUT
          
          # Check workflow changes
          echo "📋 Checking workflow changes..."
          HAS_WORKFLOW_CHANGES=$(check_patterns "$WORKFLOW_PATTERNS")
          echo "has-workflow-changes=$HAS_WORKFLOW_CHANGES" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"
          
      - name: '📊 Publishing Logic'
        id: publishing-logic
        run: |
          echo "::group::📊 Determining publishing recommendations"
          
          HAS_SOURCE="${{ steps.detect-changes.outputs.has-source-changes }}"
          HAS_CONFIG="${{ steps.detect-changes.outputs.has-config-changes }}"
          IS_MAIN_BRANCH="${{ github.ref == 'refs/heads/main' }}"
          IS_RELEASE_BRANCH="${{ contains(github.ref, 'release/') }}"
          IS_HOTFIX_BRANCH="${{ contains(github.ref, 'hotfix/') }}"
          IS_TAG_PUSH="${{ startsWith(github.ref, 'refs/tags/') }}"
          IS_PR="${{ github.event_name == 'pull_request' }}"
          
          SHOULD_PUBLISH=false
          
          # Publishing logic
          if [[ "$IS_PR" == "true" ]]; then
            echo "📝 Pull request detected - no publishing recommended"
            SHOULD_PUBLISH=false
          elif [[ "$IS_TAG_PUSH" == "true" ]]; then
            echo "🏷️ Tag push detected - publishing recommended"
            SHOULD_PUBLISH=true
          elif [[ "$IS_MAIN_BRANCH" == "true" ]] && [[ "$HAS_SOURCE" == "true" ]]; then
            echo "🎯 Main branch with source changes - publishing recommended"
            SHOULD_PUBLISH=true
          elif [[ "$IS_RELEASE_BRANCH" == "true" ]] && [[ "$HAS_SOURCE" == "true" ]]; then
            echo "🚀 Release branch with source changes - publishing recommended"
            SHOULD_PUBLISH=true
          elif [[ "$IS_HOTFIX_BRANCH" == "true" ]] && [[ "$HAS_SOURCE" == "true" ]]; then
            echo "🔥 Hotfix branch with source changes - publishing recommended"
            SHOULD_PUBLISH=true
          elif [[ "$HAS_CONFIG" == "true" ]]; then
            echo "⚙️ Configuration changes detected - publishing recommended"
            SHOULD_PUBLISH=true
          else
            echo "⏭️ No significant changes requiring publication"
            SHOULD_PUBLISH=false
          fi
          
          echo "should-publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT
          echo "📊 Publishing recommendation: $SHOULD_PUBLISH"
          
          echo "::endgroup::"
          
      - name: '📋 Generate Change Summary'
        id: change-summary
        if: inputs.generate-change-summary
        run: |
          echo "::group::📋 Generating detailed change summary"
          
          SUMMARY=""
          
          # Add header
          SUMMARY+="## 🔍 Change Detection Summary"$'\n\n'
          
          # Context information
          SUMMARY+="**Context**: ${{ github.event_name }} on \`${{ github.ref_name }}\`"$'\n'
          SUMMARY+="**Commit**: \`${{ github.sha }}\`"$'\n'
          SUMMARY+="**Run**: #${{ github.run_number }}"$'\n\n'
          
          # Change detection results
          SUMMARY+="### 📊 Change Analysis"$'\n'
          SUMMARY+="- **Source Changes**: ${{ steps.detect-changes.outputs.has-source-changes == 'true' && '✅ Detected' || '❌ None' }}"$'\n'
          SUMMARY+="- **Test Changes**: ${{ steps.detect-changes.outputs.has-test-changes == 'true' && '✅ Detected' || '❌ None' }}"$'\n'
          SUMMARY+="- **Config Changes**: ${{ steps.detect-changes.outputs.has-config-changes == 'true' && '✅ Detected' || '❌ None' }}"$'\n'
          SUMMARY+="- **Workflow Changes**: ${{ steps.detect-changes.outputs.has-workflow-changes == 'true' && '✅ Detected' || '❌ None' }}"$'\n\n'
          
          # Publishing recommendation
          SUMMARY+="### 🚀 Publishing Recommendation"$'\n'
          if [[ "${{ steps.publishing-logic.outputs.should-publish }}" == "true" ]]; then
            SUMMARY+="✅ **PUBLISH RECOMMENDED** - Significant changes detected"$'\n'
          else
            SUMMARY+="⏭️ **NO PUBLISHING NEEDED** - No significant changes"$'\n'
          fi
          SUMMARY+=$'\n'
          
          # Changed files (if any)
          if git diff --name-only HEAD~1 HEAD | head -20 | grep -q .; then
            SUMMARY+="### 📁 Changed Files (Top 20)"$'\n'
            git diff --name-only HEAD~1 HEAD | head -20 | while read file; do
              SUMMARY+="- \`$file\`"$'\n'
            done
            SUMMARY+=$'\n'
          fi
          
          # Save summary with proper escaping
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "📋 Change summary generated"
          echo "::endgroup::"
          
      - name: '📊 Summary Report'
        run: |
          echo "## 🔍 Change Detection Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📋 Detection Results" >> $GITHUB_STEP_SUMMARY
          echo "| Change Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔨 Source Code | ${{ steps.detect-changes.outputs.has-source-changes == 'true' && '✅ Changed' || '❌ No Changes' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Tests | ${{ steps.detect-changes.outputs.has-test-changes == 'true' && '✅ Changed' || '❌ No Changes' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| ⚙️ Configuration | ${{ steps.detect-changes.outputs.has-config-changes == 'true' && '✅ Changed' || '❌ No Changes' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔄 Workflows | ${{ steps.detect-changes.outputs.has-workflow-changes == 'true' && '✅ Changed' || '❌ No Changes' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🚀 Publishing Recommendation" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.publishing-logic.outputs.should-publish }}" == "true" ]]; then
            echo "✅ **PUBLISH RECOMMENDED** - Significant changes detected that warrant publishing" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **NO PUBLISHING NEEDED** - No significant changes requiring publication" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps**: Review the change analysis and proceed with the CI/CD pipeline as recommended." >> $GITHUB_STEP_SUMMARY