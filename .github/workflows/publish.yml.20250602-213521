name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop", "feature/*", "hotfix/*" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'source/Electrified.TimeSeries/Electrified.TimeSeries.csproj'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
  NUGET_SOURCE_URL: 'https://nuget.pkg.github.com/Electrified-Trading/index.json'

jobs:
  pipeline:
    runs-on: ubuntu-latest
    steps:
    
    # ═══════════════════════════════════════════════════════════════════════════════════════
    # 🏗️ SECTION 1: BUILD & TEST
    # ═══════════════════════════════════════════════════════════════════════════════════════
    
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore Dependencies
      run: dotnet restore

    - name: Build Current
      id: build-current
      run: |
        echo "🔨 Building current version..."
        dotnet build --configuration Debug --no-restore
        if [ $? -eq 0 ]; then
          echo "build-successful=true" >> $GITHUB_OUTPUT
          echo "✅ Build successful"
        else
          echo "build-successful=false" >> $GITHUB_OUTPUT
          echo "❌ Build failed"
          exit 1
        fi

    - name: Test
      if: steps.build-current.outputs.build-successful == 'true'
      run: |
        echo "🧪 Running tests..."
        dotnet test --no-build --configuration Debug --logger trx --results-directory TestResults/
        echo "✅ Tests completed"

    # ═══════════════════════════════════════════════════════════════════════════════════════
    # 🔍 SECTION 1A: CHANGE DETECTION (Non-tag builds only)
    # ═══════════════════════════════════════════════════════════════════════════════════════
    
    - name: Build Previous Version for Comparison
      id: build-previous
      if: github.ref_type != 'tag' && github.event_name == 'push'
      run: |
        echo "🔍 Building previous version for comparison..."
        
        # Get previous reference
        latestTag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$latestTag" ]; then
          prevRef="$latestTag"
          echo "📌 Comparing against latest tag: $latestTag"
        else
          prevRef="HEAD~1"
          echo "📌 Comparing against previous commit: HEAD~1"
        fi
        
        echo "previous-ref=$prevRef" >> $GITHUB_OUTPUT
        
        # Try to build previous version using worktree
        git worktree add ../prev-build "$prevRef" 2>/dev/null || {
          echo "⚠️ Could not create worktree for $prevRef - assuming first commit"
          echo "previous-build-failed=true" >> $GITHUB_OUTPUT
          exit 0
        }
        
        cd ../prev-build
        dotnet restore 2>/dev/null || {
          echo "⚠️ Previous version restore failed"
          echo "previous-build-failed=true" >> $GITHUB_OUTPUT
          cd "$GITHUB_WORKSPACE"
          git worktree remove ../prev-build --force 2>/dev/null || true
          exit 0
        }
        
        dotnet build --configuration Debug --no-restore 2>/dev/null || {
          echo "⚠️ Previous version build failed"
          echo "previous-build-failed=true" >> $GITHUB_OUTPUT
          cd "$GITHUB_WORKSPACE"
          git worktree remove ../prev-build --force 2>/dev/null || true
          exit 0
        }
        
        echo "previous-build-failed=false" >> $GITHUB_OUTPUT
        echo "✅ Previous version built successfully"
        cd "$GITHUB_WORKSPACE"

    - name: Compare Build Outputs
      id: compare-builds
      if: |
        github.ref_type != 'tag' && 
        github.event_name == 'push' && 
        steps.build-previous.outputs.previous-build-failed == 'false'
      run: |
        echo "🔍 Comparing build outputs..."
        
        # Run PowerShell comparison script
        pwsh -File scripts/compare-build-output.ps1 -Verbose
        comparisonResult=$?
        
        if [ $comparisonResult -eq 0 ]; then
          echo "has-changes=false" >> $GITHUB_OUTPUT
          echo "⏭️ No functional changes detected - jumping to summary"
        else
          echo "has-changes=true" >> $GITHUB_OUTPUT  
          echo "✅ Changes detected - proceeding to publish"
        fi
        
        # Cleanup worktree
        git worktree remove ../prev-build --force 2>/dev/null || true

    # ═══════════════════════════════════════════════════════════════════════════════════════
    # 🚀 SECTION 2: TAGGED RELEASE PUBLISHING
    # ═══════════════════════════════════════════════════════════════════════════════════════
    
    - name: Tagged Release - Extract Version
      id: tag-version
      if: github.ref_type == 'tag' && github.event_name == 'push'
      run: |
        tagVersion="${{ github.ref_name }}"
        packageVersion="${tagVersion#v}"
        echo "package-version=$packageVersion" >> $GITHUB_OUTPUT
        echo "🏷️ Tag Version: $packageVersion"

    - name: Tagged Release - Build Release Configuration
      if: github.ref_type == 'tag' && github.event_name == 'push'
      run: |
        echo "🔨 Building Release configuration for tag..."
        dotnet build --configuration Release --no-restore

    - name: Tagged Release - Pack Both Configurations
      if: github.ref_type == 'tag' && github.event_name == 'push'
      run: |
        mkdir -p ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
        
        echo "📦 Packing Release package..."
        dotnet pack ${{ env.PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --include-symbols \
          --include-source \
          --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} \
          -p:PackageVersion=${{ steps.tag-version.outputs.package-version }}
        
        echo "📦 Packing Debug package..."
        dotnet pack ${{ env.PROJECT_PATH }} \
          --configuration Debug \
          --no-build \
          --include-symbols \
          --include-source \
          --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} \
          -p:PackageVersion=${{ steps.tag-version.outputs.package-version }}-debug

    - name: Tagged Release - Publish
      if: github.ref_type == 'tag' && github.event_name == 'push'
      run: |
        echo "🚀 Publishing tagged release to GitHub Packages..."
        dotnet nuget push "${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg" \
          --source ${{ env.NUGET_SOURCE_URL }} \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --skip-duplicate

    - name: Tagged Release - Upload Artifacts
      if: github.ref_type == 'tag' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: tagged-packages-${{ github.run_number }}
        path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg
        retention-days: 30

    # ═══════════════════════════════════════════════════════════════════════════════════════
    # 🔄 SECTION 3: PREVIEW PUBLISHING (Changes detected on branches)
    # ═══════════════════════════════════════════════════════════════════════════════════════
    
    - name: Preview Publishing - Generate Version Suffix
      id: preview-version
      if: |
        github.ref_type != 'tag' && 
        github.event_name == 'push' && 
        (steps.build-previous.outputs.previous-build-failed == 'true' || 
         steps.compare-builds.outputs.has-changes == 'true')
      run: |
        branchName="${{ github.ref_name }}"
        cleanBranch=$(echo "$branchName" | sed 's/[^a-zA-Z0-9]//g')
        utcTimestamp=$(date -u +"%Y%m%d%H%M")
        versionSuffix="$cleanBranch-$utcTimestamp"
        echo "version-suffix=$versionSuffix" >> $GITHUB_OUTPUT
        echo "🔖 Preview Version Suffix: $versionSuffix"

    - name: Preview Publishing - Pack Preview Package
      if: |
        github.ref_type != 'tag' && 
        github.event_name == 'push' && 
        (steps.build-previous.outputs.previous-build-failed == 'true' || 
         steps.compare-builds.outputs.has-changes == 'true')
      run: |
        mkdir -p ${{ env.PACKAGE_OUTPUT_DIRECTORY }}
        
        echo "📦 Packing Preview package..."
        dotnet pack ${{ env.PROJECT_PATH }} \
          --configuration Debug \
          --no-build \
          --include-symbols \
          --include-source \
          --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} \
          --version-suffix ${{ steps.preview-version.outputs.version-suffix }}

    - name: Preview Publishing - Publish
      if: |
        github.ref_type != 'tag' && 
        github.event_name == 'push' && 
        (steps.build-previous.outputs.previous-build-failed == 'true' || 
         steps.compare-builds.outputs.has-changes == 'true')
      run: |
        echo "🚀 Publishing preview package to GitHub Packages..."
        dotnet nuget push "${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg" \
          --source ${{ env.NUGET_SOURCE_URL }} \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --skip-duplicate

    - name: Preview Publishing - Upload Artifacts
      if: |
        github.ref_type != 'tag' && 
        github.event_name == 'push' && 
        (steps.build-previous.outputs.previous-build-failed == 'true' || 
         steps.compare-builds.outputs.has-changes == 'true')
      uses: actions/upload-artifact@v4
      with:
        name: preview-packages-${{ github.run_number }}
        path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg
        retention-days: 30

    # ═══════════════════════════════════════════════════════════════════════════════════════
    # 📊 SECTION 4: SUMMARY & CLEANUP
    # ═══════════════════════════════════════════════════════════════════════════════════════    # ═══════════════════════════════════════════════════════════════════════════════════════
    # 📊 SECTION 4: SUMMARY & CLEANUP
    # ═══════════════════════════════════════════════════════════════════════════════════════
    
    - name: Generate Pipeline Summary
      if: always()
      run: |
        echo "## 🚀 CI/CD Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build | ${{ steps.build-current.outputs.build-successful == 'true' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Tests | ${{ job.status == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        
        # Publishing status based on event and results
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "| Publishing | ⏭️ Skipped (PR) |" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ github.ref_type }}" = "tag" ]; then
          echo "| Publishing | ✅ Tagged Release Published |" >> $GITHUB_STEP_SUMMARY
          echo "| Version | ${{ steps.tag-version.outputs.package-version }} |" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ steps.compare-builds.outputs.has-changes }}" = "true" ] || [ "${{ steps.build-previous.outputs.previous-build-failed }}" = "true" ]; then
          echo "| Publishing | ✅ Preview Published |" >> $GITHUB_STEP_SUMMARY
          echo "| Version Suffix | ${{ steps.preview-version.outputs.version-suffix }} |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Publishing | ⏭️ Skipped (No Changes) |" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.build-previous.outputs.previous-ref }}" ]; then
            echo "| Compared Against | ${{ steps.build-previous.outputs.previous-ref }} |" >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        # Add flow visualization
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔄 Pipeline Flow" >> $GITHUB_STEP_SUMMARY
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "[Build & Test] => [Summary] (PR - No Publishing)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ github.ref_type }}" = "tag" ]; then
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "[Build & Test] => [Tagged Release] => [Summary]" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ steps.compare-builds.outputs.has-changes }}" = "true" ] || [ "${{ steps.build-previous.outputs.previous-build-failed }}" = "true" ]; then
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "[Build & Test] => [Change Detection] => [Preview Publishing] => [Summary]" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        else
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "[Build & Test] => [Change Detection] => [Summary] (No Changes)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
