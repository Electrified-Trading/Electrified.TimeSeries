# 📦 Package Creation Focused Workflow
# NuGet package creation with validation
# Part of the modular CI/CD architecture

name: '📦 Package Creation Focus'

on:
  workflow_call:
    inputs:
      package-strategy:
        description: 'Package strategy (preview/release/debug-release)'
        required: true
        type: string
      include-symbols:
        description: 'Include symbol packages'
        required: false
        type: boolean
        default: true
      upload-packages:
        description: 'Upload packages as artifacts'
        required: false
        type: boolean
        default: true
      validate-packages:
        description: 'Validate package integrity'
        required: false
        type: boolean
        default: true
      package-retention-days:
        description: 'Days to retain package artifacts'
        required: false
        type: number
        default: 30
      build-configuration:
        description: 'Build configuration to use'
        required: false
        type: string
        default: 'Release'
        
    outputs:
      package-path:
        description: 'Path to created packages'
        value: ${{ jobs.package-creation.outputs.package-path }}
      package-version:
        description: 'Version of created packages'
        value: ${{ jobs.package-creation.outputs.package-version }}
      validation-results:
        description: 'Package validation results'
        value: ${{ jobs.package-creation.outputs.validation-results }}
        
  workflow_dispatch:
    inputs:
      package-strategy:
        description: 'Package strategy'
        required: true
        type: choice
        options: ['preview', 'release', 'debug-release']
        default: 'preview'
      include-symbols:
        description: 'Include symbol packages'
        required: false
        type: boolean
        default: true
      upload-packages:
        description: 'Upload packages as artifacts'
        required: false
        type: boolean
        default: true
      validate-packages:
        description: 'Validate package integrity'
        required: false
        type: boolean
        default: true
      package-retention-days:
        description: 'Days to retain package artifacts'
        required: false
        type: number
        default: 30
      build-configuration:
        description: 'Build configuration to use'
        required: false
        type: choice
        options: ['Debug', 'Release']
        default: 'Release'

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  package-creation:
    name: '📦 Create Packages'
    runs-on: ubuntu-latest
    
    outputs:
      package-path: ${{ steps.package-info.outputs.package-path }}
      package-version: ${{ steps.package-info.outputs.package-version }}
      validation-results: ${{ steps.package-validation.outputs.validation-results }}
      
    steps:
      - name: '📥 Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: '⚙️ Setup .NET'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          
      - name: '📦 Restore Dependencies'
        run: |
          echo "::group::📦 Restoring NuGet packages"
          dotnet restore --verbosity minimal
          echo "::endgroup::"
          
      - name: '🔨 Build for Packaging'
        run: |
          echo "::group::🔨 Building solution for packaging"
          dotnet build \
            --configuration ${{ inputs.build-configuration }} \
            --no-restore \
            --verbosity minimal
          echo "::endgroup::"
          
      - name: '📋 Package Strategy Setup'
        id: strategy-setup
        run: |
          echo "::group::📋 Configuring package strategy"
          
          STRATEGY="${{ inputs.package-strategy }}"
          BUILD_CONFIG="${{ inputs.build-configuration }}"
          
          echo "📦 Package Strategy: $STRATEGY"
          echo "🔨 Build Configuration: $BUILD_CONFIG"
          
          # Set strategy-specific parameters
          case "$STRATEGY" in
            "release")
              echo "🚀 Release strategy - production packages"
              PACKAGE_SUFFIX=""
              VERSION_SUFFIX=""
              ;;
            "preview")
              echo "🔍 Preview strategy - preview packages"
              PACKAGE_SUFFIX="-preview"
              VERSION_SUFFIX="--version-suffix preview-$(date +'%Y%m%d%H%M%S')"
              ;;
            "debug-release")
              echo "🔧 Debug-release strategy - development packages"
              PACKAGE_SUFFIX="-debug"
              VERSION_SUFFIX="--version-suffix debug-$(date +'%Y%m%d%H%M%S')"
              ;;
            *)
              echo "❌ Unknown strategy: $STRATEGY"
              exit 1
              ;;
          esac
          
          echo "package-suffix=$PACKAGE_SUFFIX" >> $GITHUB_OUTPUT
          echo "version-suffix=$VERSION_SUFFIX" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"
          
      - name: '📦 Create NuGet Packages'
        id: package-creation
        run: |
          echo "::group::📦 Creating NuGet packages"
          
          # Prepare output directory
          mkdir -p packages
          
          # Create packages with strategy-specific settings
          dotnet pack \
            --configuration ${{ inputs.build-configuration }} \
            --no-build \
            --output packages \
            --verbosity normal \
            ${{ steps.strategy-setup.outputs.version-suffix }} \
            ${{ inputs.include-symbols && '--include-symbols --include-source' || '' }}
            
          # List created packages
          echo "📦 Created packages:"
          ls -la packages/
          
          # Count packages
          PACKAGE_COUNT=$(ls packages/*.nupkg 2>/dev/null | wc -l)
          SYMBOL_COUNT=$(ls packages/*.snupkg 2>/dev/null | wc -l)
          
          echo "📊 Package Summary:"
          echo "  - Standard packages: $PACKAGE_COUNT"
          echo "  - Symbol packages: $SYMBOL_COUNT"
          
          if [[ $PACKAGE_COUNT -eq 0 ]]; then
            echo "❌ No packages were created"
            exit 1
          fi
          
          echo "✅ Package creation completed successfully"
          echo "::endgroup::"
          
      - name: '📋 Package Information'
        id: package-info
        run: |
          echo "::group::📋 Extracting package information"
          
          # Find the main package
          MAIN_PACKAGE=$(ls packages/*.nupkg | head -1)
          if [[ -z "$MAIN_PACKAGE" ]]; then
            echo "❌ No main package found"
            exit 1
          fi
          
          # Extract version from package name
          PACKAGE_VERSION=$(basename "$MAIN_PACKAGE" .nupkg | sed 's/^Electrified\.TimeSeries\.//')
          
          echo "📦 Package Information:"
          echo "  - Main Package: $MAIN_PACKAGE"
          echo "  - Version: $PACKAGE_VERSION"
          echo "  - Strategy: ${{ inputs.package-strategy }}"
          
          # Set outputs
          echo "package-path=packages" >> $GITHUB_OUTPUT
          echo "package-version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"
          
      - name: '🔍 Package Validation'
        id: package-validation
        if: inputs.validate-packages
        run: |
          echo "::group::🔍 Validating package integrity"
          
          VALIDATION_PASSED="true"
          VALIDATION_RESULTS=""
          
          for package in packages/*.nupkg; do
            if [[ ! -f "$package" ]]; then
              continue
            fi
            
            echo "🔍 Validating: $(basename "$package")"
            
            # Check package size
            SIZE=$(stat -c%s "$package")
            if [[ $SIZE -lt 1024 ]]; then
              echo "⚠️ Package unusually small: $SIZE bytes"
              VALIDATION_PASSED="false"
            else
              echo "✅ Package size OK: $SIZE bytes"
            fi
            
            # Validate package structure using dotnet
            if dotnet nuget verify "$package" > /dev/null 2>&1; then
              echo "✅ Package structure valid"
            else
              echo "⚠️ Package structure validation failed"
              VALIDATION_PASSED="false"
            fi
            
            # Extract and check basic content
            TEMP_DIR=$(mktemp -d)
            unzip -q "$package" -d "$TEMP_DIR"
            
            # Check for required files
            if [[ -f "$TEMP_DIR/lib/net8.0/Electrified.TimeSeries.dll" ]] || [[ -f "$TEMP_DIR/lib/net9.0/Electrified.TimeSeries.dll" ]]; then
              echo "✅ Main assembly found"
            else
              echo "❌ Main assembly missing"
              VALIDATION_PASSED="false"
            fi
            
            if [[ -f "$TEMP_DIR/*.nuspec" ]]; then
              echo "✅ Package manifest found"
            else
              echo "⚠️ Package manifest missing"
            fi
            
            # Cleanup
            rm -rf "$TEMP_DIR"
            
            echo ""
          done
          
          if [[ "$VALIDATION_PASSED" == "true" ]]; then
            VALIDATION_RESULTS="All packages passed validation"
            echo "✅ All packages passed validation"
          else
            VALIDATION_RESULTS="Some packages failed validation"
            echo "❌ Some packages failed validation"
          fi
          
          echo "validation-results=$VALIDATION_RESULTS" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"
          
      - name: '📤 Upload Package Artifacts'
        if: inputs.upload-packages
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ inputs.package-strategy }}-${{ github.run_number }}
          path: packages/
          retention-days: ${{ inputs.package-retention-days }}
          if-no-files-found: error
          
      - name: '📊 Package Summary'
        run: |
          echo "## 📦 Package Creation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Strategy**: ${{ inputs.package-strategy }}" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ steps.package-info.outputs.package-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Config**: ${{ inputs.build-configuration }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run**: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📦 Package Details" >> $GITHUB_STEP_SUMMARY
          echo "| Setting | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Package Strategy | \`${{ inputs.package-strategy }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Include Symbols | ${{ inputs.include-symbols && '✅ Yes' || '❌ No' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Upload Artifacts | ${{ inputs.upload-packages && '✅ Yes' || '❌ No' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Validate Packages | ${{ inputs.validate-packages && '✅ Yes' || '❌ No' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Retention Period | ${{ inputs.package-retention-days }} days |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📋 Created Packages" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Type | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|------|------|" >> $GITHUB_STEP_SUMMARY
          
          for package in packages/*.nupkg packages/*.snupkg; do
            if [[ -f "$package" ]]; then
              NAME=$(basename "$package")
              TYPE="Standard"
              if [[ "$NAME" == *.snupkg ]]; then
                TYPE="Symbols"
              fi
              SIZE=$(stat -c%s "$package" | numfmt --to=iec)
              echo "| \`$NAME\` | $TYPE | $SIZE |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ inputs.validate-packages }}" == "true" ]]; then
            echo "### 🔍 Validation Results" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.package-validation.outputs.validation-results }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          case "${{ inputs.package-strategy }}" in
            "release")
              echo "🚀 **Release packages** are ready for production deployment." >> $GITHUB_STEP_SUMMARY
              ;;
            "preview")
              echo "🔍 **Preview packages** are ready for testing and validation." >> $GITHUB_STEP_SUMMARY
              ;;
            "debug-release")
              echo "🔧 **Debug packages** are ready for development and troubleshooting." >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps**: ${{ inputs.upload-packages && 'Packages are available as artifacts. Proceed to publishing phase.' || 'Review package contents and manually upload if needed.' }}" >> $GITHUB_STEP_SUMMARY