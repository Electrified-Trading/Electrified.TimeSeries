name: Build and Publish NuGet Package

on:
  push:
    branches: [ "main", "develop", "feature/*", "hotfix/*" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main", "develop" ]

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'source/Electrified.TimeSeries/Electrified.TimeSeries.csproj'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
  NUGET_SOURCE_URL: 'https://nuget.pkg.github.com/Electrified-Trading/index.json'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed for versioning

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Debug
      run: dotnet build --configuration Debug --no-restore

    - name: Build Release
      if: github.ref_type == 'tag'
      run: dotnet build --configuration Release --no-restore

    - name: Test
      run: dotnet test --configuration Debug --no-build --verbosity normal

    # Build Output Hash Comparison - Proven deterministic approach for .NET CI/CD
    - name: Smart Change Detection (Build Output Comparison)
      if: github.ref_type != 'tag'
      id: changes
      run: |
        $scriptPath = "scripts/compare-build-output.ps1"
        $projectPath = "${{ env.PROJECT_PATH }}"
        
        if (-not (Test-Path $scriptPath)) {
          Write-Host "::error::Build comparison script not found at $scriptPath"
          Write-Host "::warning::Assuming changes exist to be safe"
          echo "has_changes=true" >> $env:GITHUB_OUTPUT
          exit 0
        }
        
        try {
          Write-Host "::notice::üîç Running deterministic build output comparison..."
          Write-Host "::notice::üìÅ Project: $projectPath"
          
          # Execute the build output comparison script in CI mode
          & $scriptPath -Mode CI -ProjectPath $projectPath -OutputDir "workflow-build-comparison"
          $exitCode = $LASTEXITCODE
          
          if ($exitCode -eq 0) {
            Write-Host "::notice::‚úÖ Build outputs are identical"
            Write-Host "::notice::‚è≠Ô∏è No functional changes detected - skipping package creation"
            echo "has_changes=false" >> $env:GITHUB_OUTPUT
          } elseif ($exitCode -eq 1) {
            Write-Host "::notice::üîÑ Functional changes detected in build output"
            Write-Host "::notice::üì¶ Will create new package version"
            echo "has_changes=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "::error::Build comparison failed with exit code: $exitCode"
            Write-Host "::warning::Assuming changes exist to be safe"
            echo "has_changes=true" >> $env:GITHUB_OUTPUT
          }        } catch {
          Write-Host "::error::Error during build comparison: $_"
          Write-Host "::warning::Assuming changes exist to be safe"
          echo "has_changes=true" >> $env:GITHUB_OUTPUT
        }
      shell: pwsh

    # Upload build comparison artifacts for debugging (when comparison runs)
    - name: Upload Build Comparison Artifacts
      if: github.ref_type != 'tag' && always()
      uses: actions/upload-artifact@v4
      with:
        name: build-comparison-artifacts
        path: workflow-build-comparison/
        retention-days: 7

    # Generate version suffix for preview packages (non-tag pushes)
    - name: Generate Preview Version Suffix
      if: github.ref_type != 'tag'
      run: |
        # Get branch name and clean it for package versioning
        $branchName = "${{ github.ref_name }}" -replace '[^a-zA-Z0-9]', ''
        # Get UTC timestamp in format YYYYMMDDHHmm
        $utcTimestamp = (Get-Date).ToUniversalTime().ToString("yyyyMMddHHmm")
        # Create version suffix: branch-timestamp
        $versionSuffix = "$branchName-$utcTimestamp"
        echo "VERSION_SUFFIX=$versionSuffix" >> $env:GITHUB_ENV
        echo "Version suffix: $versionSuffix"
      shell: pwsh

    # Extract version from tag (tag pushes)
    - name: Extract Release Version
      if: github.ref_type == 'tag'
      run: |
        # Remove 'v' prefix from tag (e.g., v1.0.0 -> 1.0.0)
        $tagVersion = "${{ github.ref_name }}" -replace '^v', ''
        echo "PACKAGE_VERSION=$tagVersion" >> $env:GITHUB_ENV
        echo "Release version: $tagVersion"
      shell: pwsh

    # Pack with version suffix for preview builds (Debug only)
    - name: Pack NuGet Package (Preview - Debug)
      if: github.ref_type != 'tag' && steps.changes.outputs.has_changes == 'true'
      run: |
        dotnet pack ${{ env.PROJECT_PATH }} \
          --configuration Debug \
          --no-build \
          --include-symbols \
          --include-source \
          --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} \
          --version-suffix ${{ env.VERSION_SUFFIX }}

    # Pack release builds (Release + Debug with -debug suffix)
    - name: Pack NuGet Package (Release)
      if: github.ref_type == 'tag'
      run: |
        dotnet pack ${{ env.PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --include-symbols \
          --include-source \
          --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} \
          -p:PackageVersion=${{ env.PACKAGE_VERSION }}

    - name: Pack NuGet Package (Release - Debug)
      if: github.ref_type == 'tag'
      run: |
        dotnet pack ${{ env.PROJECT_PATH }} \
          --configuration Debug \
          --no-build \
          --include-symbols \
          --include-source \
          --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} \
          -p:PackageVersion=${{ env.PACKAGE_VERSION }}-debug

    # Skip packaging message for preview builds without changes
    - name: Skip Package Creation (No Changes)
      if: github.ref_type != 'tag' && steps.changes.outputs.has_changes == 'false'
      run: |
        echo "‚è≠Ô∏è Skipping package creation - no meaningful code changes detected"
        echo "This prevents duplicate preview packages for version bumps and documentation changes"

    # Only publish on pushes (not PRs) and when there are meaningful changes or it's a tag
    - name: Publish to GitHub Packages
      if: github.event_name == 'push' && (github.ref_type == 'tag' || steps.changes.outputs.has_changes == 'true')
      run: |
        dotnet nuget push "${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg" \
          --source ${{ env.NUGET_SOURCE_URL }} \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --skip-duplicate

    # Upload package artifacts for inspection
    - name: Upload Package Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg
        retention-days: 30
