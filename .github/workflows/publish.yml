name: Build and Publish NuGet Package

on:
  push:
    branches: [ "main", "develop", "feature/*", "hotfix/*" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main", "develop" ]

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'source/Electrified.TimeSeries/Electrified.TimeSeries.csproj'
  PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
  NUGET_SOURCE_URL: 'https://nuget.pkg.github.com/Electrified-Trading/index.json'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed for versioning

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Debug
      run: dotnet build --configuration Debug --no-restore    - name: Build Release
      if: github.ref_type == 'tag'
      run: dotnet build --configuration Release --no-restore

    - name: Test
      run: dotnet test --configuration Debug --no-build --verbosity normal

    # Check if compiled artifacts differ from last tag (only for non-tag pushes)
    - name: Check for Artifact Changes
      if: github.ref_type != 'tag'
      id: changes
      run: |
        # Get the latest tag
        $latestTag = git describe --tags --abbrev=0 2>$null
        
        if (-not $latestTag) {
          echo "No previous tags found - this will be the first release"
          echo "has_changes=true" >> $env:GITHUB_OUTPUT
          exit 0
        }
        
        echo "Latest tag: $latestTag"
        
        # Calculate hash of current build artifacts (the actual compiled DLL)
        $dllPath = "source/Electrified.TimeSeries/bin/Debug/net9.0/Electrified.TimeSeries.dll"
        
        if (-not (Test-Path $dllPath)) {
          echo "‚ùå Could not find compiled DLL at $dllPath"
          exit 1
        }
        
        $currentHash = Get-FileHash $dllPath -Algorithm SHA256
        echo "üîç Current build hash: $($currentHash.Hash)"
        
        # Build the tagged version in a temp directory for comparison
        $tempDir = New-Item -ItemType Directory -Path "temp-tag-build" -Force
        echo "üèóÔ∏è Building tagged version $latestTag for comparison..."
        
        Push-Location $tempDir
        try {
          # Clone just the tagged version
          git clone --depth 1 --branch $latestTag https://github.com/Electrified-Trading/Electrified.TimeSeries.git . 2>$null
          
          # Restore and build the tagged version
          dotnet restore --verbosity quiet
          dotnet build source/Electrified.TimeSeries/Electrified.TimeSeries.csproj --configuration Debug --verbosity quiet
          
          $taggedDllPath = "source/Electrified.TimeSeries/bin/Debug/net9.0/Electrified.TimeSeries.dll"
          
          if (Test-Path $taggedDllPath) {
            $taggedHash = Get-FileHash $taggedDllPath -Algorithm SHA256
            echo "üè∑Ô∏è Tagged version hash: $($taggedHash.Hash)"
            
            # Compare the actual compiled artifacts
            if ($currentHash.Hash -eq $taggedHash.Hash) {
              echo "‚úÖ Compiled artifacts are identical to $latestTag"
              echo "‚è≠Ô∏è Skipping package creation - no functional changes detected"
              echo "has_changes=false" >> $env:GITHUB_OUTPUT
            } else {
              echo "üîÑ Compiled artifacts differ from $latestTag"
              echo "üì¶ Will create new package version"
              echo "has_changes=true" >> $env:GITHUB_OUTPUT
            }
          } else {
            echo "‚ö†Ô∏è Could not build tagged version for comparison"
            echo "üì¶ Assuming changes exist to be safe"
            echo "has_changes=true" >> $env:GITHUB_OUTPUT
          }
        } catch {
          echo "‚ö†Ô∏è Error during tagged version comparison: $_"
          echo "üì¶ Assuming changes exist to be safe"
          echo "has_changes=true" >> $env:GITHUB_OUTPUT
        } finally {
          Pop-Location
          Remove-Item $tempDir -Recurse -Force -ErrorAction SilentlyContinue
        }
      shell: pwsh

    # Generate version suffix for preview packages (non-tag pushes)
    - name: Generate Preview Version Suffix
      if: github.ref_type != 'tag'
      run: |
        # Get branch name and clean it for package versioning
        $branchName = "${{ github.ref_name }}" -replace '[^a-zA-Z0-9]', ''
        # Get UTC timestamp in format YYYYMMDDHHmm
        $utcTimestamp = (Get-Date).ToUniversalTime().ToString("yyyyMMddHHmm")
        # Create version suffix: branch-timestamp
        $versionSuffix = "$branchName-$utcTimestamp"
        echo "VERSION_SUFFIX=$versionSuffix" >> $env:GITHUB_ENV
        echo "Version suffix: $versionSuffix"
      shell: pwsh

    # Extract version from tag (tag pushes)
    - name: Extract Release Version
      if: github.ref_type == 'tag'
      run: |
        # Remove 'v' prefix from tag (e.g., v1.0.0 -> 1.0.0)
        $tagVersion = "${{ github.ref_name }}" -replace '^v', ''
        echo "PACKAGE_VERSION=$tagVersion" >> $env:GITHUB_ENV
        echo "Release version: $tagVersion"
      shell: pwsh

    # Pack with version suffix for preview builds (Debug only)
    - name: Pack NuGet Package (Preview - Debug)
      if: github.ref_type != 'tag' && steps.changes.outputs.has_changes == 'true'
      run: |
        dotnet pack ${{ env.PROJECT_PATH }} \
          --configuration Debug \
          --no-build \
          --include-symbols \
          --include-source \
          --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} \
          --version-suffix ${{ env.VERSION_SUFFIX }}

    # Pack release builds (Release + Debug with -debug suffix)
    - name: Pack NuGet Package (Release)
      if: github.ref_type == 'tag'
      run: |
        dotnet pack ${{ env.PROJECT_PATH }} \
          --configuration Release \
          --no-build \
          --include-symbols \
          --include-source \
          --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} \
          -p:PackageVersion=${{ env.PACKAGE_VERSION }}

    - name: Pack NuGet Package (Release - Debug)
      if: github.ref_type == 'tag'
      run: |
        dotnet pack ${{ env.PROJECT_PATH }} \
          --configuration Debug \
          --no-build \
          --include-symbols \
          --include-source \
          --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }} \
          -p:PackageVersion=${{ env.PACKAGE_VERSION }}-debug

    # Skip packaging message for preview builds without changes
    - name: Skip Package Creation (No Changes)
      if: github.ref_type != 'tag' && steps.changes.outputs.has_changes == 'false'
      run: |
        echo "‚è≠Ô∏è Skipping package creation - no meaningful code changes detected"
        echo "This prevents duplicate preview packages for version bumps and documentation changes"

    # Only publish on pushes (not PRs) and when there are meaningful changes or it's a tag
    - name: Publish to GitHub Packages
      if: github.event_name == 'push' && (github.ref_type == 'tag' || steps.changes.outputs.has_changes == 'true')
      run: |
        dotnet nuget push "${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg" \
          --source ${{ env.NUGET_SOURCE_URL }} \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --skip-duplicate

    # Upload package artifacts for inspection
    - name: Upload Package Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg
        retention-days: 30
