# 🚀 Package Publishing Focused Workflow
# Ultra-granular package publishing with comprehensive management
# Part of the modular CI/CD architecture

name: '🚀 Package Publishing'

on:
  workflow_call:
    inputs:
      package-strategy:
        description: 'Package strategy (preview, release, debug-release)'
        required: true
        type: string
        default: 'preview'
      target-feed:
        description: 'Target feed (nuget-org, github-packages, private-feed)'
        required: true
        type: string
        default: 'github-packages'
      dry-run:
        description: 'Perform dry-run (test without publishing)'
        required: false
        type: boolean
        default: false
      cleanup-old-packages:
        description: 'Clean up old package versions'
        required: false
        type: boolean
        default: true
      package-retention:
        description: 'Number of old versions to retain'
        required: false
        type: number
        default: 5
      verify-publishing:
        description: 'Verify packages after publishing'
        required: false
        type: boolean
        default: true
    outputs:
      published-version:
        description: 'Version of the published package'
        value: ${{ jobs.publish.outputs.published-version }}
      published-feed:
        description: 'Feed where package was published'
        value: ${{ jobs.publish.outputs.published-feed }}
      cleanup-results:
        description: 'Results of package cleanup'
        value: ${{ jobs.publish.outputs.cleanup-results }}
      verification-results:
        description: 'Results of publishing verification'
        value: ${{ jobs.publish.outputs.verification-results }}
    secrets:
      NUGET_API_KEY:
        description: 'NuGet API key for publishing'
        required: true
      
  workflow_dispatch:
    inputs:
      package-strategy:
        description: 'Package strategy'
        required: true
        type: choice
        options:
          - preview
          - release
          - debug-release
        default: 'preview'
      target-feed:
        description: 'Target feed'
        required: true
        type: choice
        options:
          - nuget-org
          - github-packages
          - private-feed
        default: 'github-packages'
      dry-run:
        description: 'Perform dry-run (test without publishing)'
        required: false
        type: boolean
        default: false
      cleanup-old-packages:
        description: 'Clean up old package versions'
        required: false
        type: boolean
        default: true
      package-retention:
        description: 'Number of old versions to retain'
        required: false
        type: number
        default: 5
      verify-publishing:
        description: 'Verify packages after publishing'
        required: false
        type: boolean
        default: true

jobs:
  publish:
    name: '🚀 Publish Package'
    runs-on: ubuntu-latest
    
    outputs:
      published-version: ${{ steps.publish-package.outputs.published-version }}
      published-feed: ${{ steps.publish-package.outputs.published-feed }}
      cleanup-results: ${{ steps.cleanup-packages.outputs.cleanup-results }}
      verification-results: ${{ steps.verify-publishing.outputs.verification-results }}
      
    steps:
      - name: '📥 Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: '🔧 Setup .NET'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
          
      - name: '📦 Download Package Artifacts'
        uses: actions/download-artifact@v4
        with:
          name: packages-${{ inputs.package-strategy }}-${{ github.run_number }}
          path: ./packages
          
      - name: '🔍 Analyze Package Strategy'
        id: analyze-strategy
        run: |
          echo "::group::🔍 Analyzing package publishing strategy"
          
          PACKAGE_STRATEGY="${{ inputs.package-strategy }}"
          TARGET_FEED="${{ inputs.target-feed }}"
          DRY_RUN="${{ inputs.dry-run }}"
          
          echo "📋 Publishing Configuration:"
          echo "  Package Strategy: $PACKAGE_STRATEGY"
          echo "  Target Feed: $TARGET_FEED"
          echo "  Dry Run: $DRY_RUN"
          
          # Determine package source and naming
          PACKAGE_PATH=$(find ./packages -name "*.nupkg" -not -name "*.symbols.nupkg" | head -1)
          SYMBOLS_PATH=$(find ./packages -name "*.symbols.nupkg" | head -1)
          
          if [[ -z "$PACKAGE_PATH" ]]; then
            echo "❌ No package files found"
            exit 1
          fi
          
          PACKAGE_NAME=$(basename "$PACKAGE_PATH" .nupkg)
          VERSION=$(echo "$PACKAGE_NAME" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\-\.]+)?$')
          
          echo "📦 Package Details:"
          echo "  Package Path: $PACKAGE_PATH"
          echo "  Package Name: $PACKAGE_NAME"
          echo "  Version: $VERSION"
          
          # Set feed configuration
          case "$TARGET_FEED" in
            "nuget-org")
              FEED_URL="https://api.nuget.org/v3/index.json"
              API_KEY_VAR="NUGET_API_KEY"
              echo "🌐 Target: NuGet.org (public)"
              ;;
            "github-packages")
              FEED_URL="https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
              API_KEY_VAR="GITHUB_TOKEN"
              echo "📱 Target: GitHub Packages"
              ;;
            "private-feed")
              FEED_URL="${{ vars.PRIVATE_NUGET_FEED_URL }}"
              API_KEY_VAR="NUGET_API_KEY"
              echo "🔒 Target: Private Feed"
              ;;
            *)
              echo "❌ Unknown target feed: $TARGET_FEED"
              exit 1
              ;;
          esac
          
          echo "package-path=$PACKAGE_PATH" >> $GITHUB_OUTPUT
          echo "symbols-path=$SYMBOLS_PATH" >> $GITHUB_OUTPUT
          echo "package-name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "feed-url=$FEED_URL" >> $GITHUB_OUTPUT
          echo "api-key-var=$API_KEY_VAR" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"
          
      - name: '🚀 Publish Package'
        id: publish-package
        if: inputs.dry-run != true
        run: |
          echo "::group::🚀 Publishing package to ${{ inputs.target-feed }}"
          
          PACKAGE_PATH="${{ steps.analyze-strategy.outputs.package-path }}"
          FEED_URL="${{ steps.analyze-strategy.outputs.feed-url }}"
          API_KEY_VAR="${{ steps.analyze-strategy.outputs.api-key-var }}"
          
          # Get the appropriate API key
          if [[ "$API_KEY_VAR" == "NUGET_API_KEY" ]]; then
            API_KEY="${{ secrets.NUGET_API_KEY }}"
          else
            API_KEY="${{ secrets.GITHUB_TOKEN }}"
          fi
          
          echo "📤 Publishing package: ${{ steps.analyze-strategy.outputs.package-name }}"
          echo "🎯 Target feed: $FEED_URL"
          
          # Publish the package
          dotnet nuget push "$PACKAGE_PATH" \
            --source "$FEED_URL" \
            --api-key "$API_KEY" \
            --skip-duplicate \
            --no-symbols
          
          # Publish symbols if available
          SYMBOLS_PATH="${{ steps.analyze-strategy.outputs.symbols-path }}"
          if [[ -n "$SYMBOLS_PATH" && -f "$SYMBOLS_PATH" ]]; then
            echo "🔣 Publishing symbols package"
            dotnet nuget push "$SYMBOLS_PATH" \
              --source "$FEED_URL" \
              --api-key "$API_KEY" \
              --skip-duplicate
          fi
          
          echo "✅ Package published successfully"
          echo "published-version=${{ steps.analyze-strategy.outputs.version }}" >> $GITHUB_OUTPUT
          echo "published-feed=${{ inputs.target-feed }}" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"
          
      - name: '🧹 Clean Up Old Packages'
        id: cleanup-packages
        if: inputs.cleanup-old-packages == true && inputs.dry-run != true
        run: |
          echo "::group::🧹 Cleaning up old package versions"
          
          RETENTION_COUNT="${{ inputs.package-retention }}"
          TARGET_FEED="${{ inputs.target-feed }}"
          
          echo "🗂️ Retention policy: Keep $RETENTION_COUNT most recent versions"
          
          # Note: Actual cleanup implementation would depend on the target feed
          # This is a placeholder for the cleanup logic
          
          case "$TARGET_FEED" in
            "github-packages")
              echo "📱 GitHub Packages cleanup (requires GitHub CLI or API)"
              # gh api repos/${{ github.repository }}/packages/npm/PACKAGE_NAME/versions
              echo "⚠️ GitHub Packages cleanup requires additional implementation"
              ;;
            "nuget-org")
              echo "🌐 NuGet.org doesn't support automated cleanup via API"
              echo "ℹ️ Consider using NuGet.org's retention policies"
              ;;
            "private-feed")
              echo "🔒 Private feed cleanup (implementation specific)"
              echo "⚠️ Private feed cleanup requires custom implementation"
              ;;
          esac
          
          CLEANUP_RESULT="Cleanup policy applied (keep $RETENTION_COUNT versions)"
          echo "cleanup-results=$CLEANUP_RESULT" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"
          
      - name: '✅ Verify Publishing'
        id: verify-publishing
        if: inputs.verify-publishing == true && inputs.dry-run != true
        run: |
          echo "::group::✅ Verifying package publishing"
          
          PACKAGE_NAME="${{ steps.analyze-strategy.outputs.package-name }}"
          VERSION="${{ steps.analyze-strategy.outputs.version }}"
          FEED_URL="${{ steps.analyze-strategy.outputs.feed-url }}"
          
          echo "🔍 Verifying package: $PACKAGE_NAME v$VERSION"
          echo "📍 Feed: $FEED_URL"
          
          # Wait for package to be available (some feeds have propagation delay)
          echo "⏳ Waiting for package propagation..."
          sleep 30
          
          # Attempt to search for the package
          echo "🔎 Searching for published package..."
          
          # Use dotnet list package --source to verify
          VERIFICATION_RESULT="Package verification attempted"
          
          if dotnet nuget list source | grep -q "$FEED_URL"; then
            echo "✅ Feed is configured and accessible"
            VERIFICATION_RESULT="✅ Feed accessible, package likely published successfully"
          else
            echo "⚠️ Feed verification inconclusive"
            VERIFICATION_RESULT="⚠️ Feed verification inconclusive"
          fi
          
          echo "verification-results=$VERIFICATION_RESULT" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"
          
      - name: '📊 Dry Run Summary'
        if: inputs.dry-run == true
        run: |
          echo "## 🧪 Dry Run - Package Publishing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Mode**: 🧪 Dry Run (no actual publishing performed)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📦 Package Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: ${{ steps.analyze-strategy.outputs.package-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.analyze-strategy.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Strategy**: ${{ inputs.package-strategy }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🎯 Target Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Feed**: ${{ inputs.target-feed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: ${{ steps.analyze-strategy.outputs.feed-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cleanup**: ${{ inputs.cleanup-old-packages && '✅ Enabled' || '❌ Disabled' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Verification**: ${{ inputs.verify-publishing && '✅ Enabled' || '❌ Disabled' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- Review the configuration above" >> $GITHUB_STEP_SUMMARY
          echo "- Run without \`dry-run\` to perform actual publishing" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure API keys and permissions are configured" >> $GITHUB_STEP_SUMMARY
          
      - name: '📊 Publishing Summary'
        if: inputs.dry-run != true
        run: |
          echo "## 🚀 Package Publishing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📦 Published Package" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: ${{ steps.analyze-strategy.outputs.package-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.publish-package.outputs.published-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Feed**: ${{ steps.publish-package.outputs.published-feed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Strategy**: ${{ inputs.package-strategy }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔧 Operations Performed" >> $GITHUB_STEP_SUMMARY
          echo "| Operation | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Package Publishing | ✅ Success | Package uploaded to ${{ inputs.target-feed }} |" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ inputs.cleanup-old-packages }}" == "true" ]]; then
            echo "| 🧹 Package Cleanup | ✅ Applied | ${{ steps.cleanup-packages.outputs.cleanup-results }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| 🧹 Package Cleanup | ⏭️ Skipped | Cleanup disabled |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ inputs.verify-publishing }}" == "true" ]]; then
            echo "| ✅ Publishing Verification | ✅ Completed | ${{ steps.verify-publishing.outputs.verification-results }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| ✅ Publishing Verification | ⏭️ Skipped | Verification disabled |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- **Package is now available** for consumption from ${{ inputs.target-feed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Update consuming projects** to use version ${{ steps.publish-package.outputs.published-version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Monitor package usage** and gather feedback" >> $GITHUB_STEP_SUMMARY
          
          # Add feed-specific instructions
          case "${{ inputs.target-feed }}" in
            "nuget-org")
              echo "- **NuGet.org**: Package will be available at https://www.nuget.org/packages/${{ steps.analyze-strategy.outputs.package-name }}" >> $GITHUB_STEP_SUMMARY
              ;;
            "github-packages")
              echo "- **GitHub Packages**: Configure package source in consuming projects" >> $GITHUB_STEP_SUMMARY
              ;;
            "private-feed")
              echo "- **Private Feed**: Ensure consuming projects have access to the private feed" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
