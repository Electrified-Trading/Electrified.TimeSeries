# üöÄ Package Publishing Focused Workflow
# Ultra-granular package publishing with comprehensive management
# Part of the modular CI/CD architecture

name: 'üöÄ Package Publishing'

on:
  workflow_call:
    inputs:
      package-strategy:
        description: 'Package strategy (preview, release, debug-release)'
        required: true
        type: string
        default: 'preview'
      target-feed:
        description: 'Target feed (nuget-org, github-packages, private-feed)'
        required: true
        type: string
        default: 'github-packages'
      dry-run:
        description: 'Perform dry-run (test without publishing)'
        required: false
        type: boolean
        default: false
      cleanup-old-packages:
        description: 'Clean up old package versions'
        required: false
        type: boolean
        default: true
      package-retention:
        description: 'Number of old versions to retain'
        required: false
        type: number
        default: 5
      verify-publishing:
        description: 'Verify packages after publishing'
        required: false
        type: boolean
        default: true
    outputs:
      published-version:
        description: 'Version of the published package'
        value: ${{ jobs.publish.outputs.published-version }}
      published-feed:
        description: 'Feed where package was published'
        value: ${{ jobs.publish.outputs.published-feed }}
      cleanup-results:
        description: 'Results of package cleanup'
        value: ${{ jobs.publish.outputs.cleanup-results }}
      verification-results:
        description: 'Results of publishing verification'
        value: ${{ jobs.publish.outputs.verification-results }}
      
  workflow_dispatch:
    inputs:
      package-strategy:
        description: 'Package strategy'
        required: true
        type: choice
        options:
          - preview
          - release
          - debug-release
        default: preview
      target-feed:
        description: 'Target feed'
        required: true
        type: choice
        options:
          - nuget-org
          - github-packages
          - private-feed
        default: github-packages
      dry-run:
        description: 'Dry run mode'
        required: false
        type: boolean
        default: false
      cleanup-old-packages:
        description: 'Clean up old packages'
        required: false
        type: boolean
        default: true
      package-retention:
        description: 'Versions to retain'
        required: false
        type: number
        default: 5
      verify-publishing:
        description: 'Verify after publishing'
        required: false
        type: boolean
        default: true

jobs:
  publish:
    name: 'üöÄ Publish Packages'
    runs-on: ubuntu-latest
    
    outputs:
      published-version: ${{ steps.publish-packages.outputs.published-version }}
      published-feed: ${{ steps.feed-config.outputs.feed-name }}
      cleanup-results: ${{ steps.cleanup-packages.outputs.cleanup-results }}
      verification-results: ${{ steps.verify-publishing.outputs.verification-results }}
    
    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 'üîß Setup .NET'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          
      - name: 'üì¶ Download Package Artifacts'
        uses: actions/download-artifact@v4
        with:
          name: packages-${{ inputs.package-strategy }}-${{ github.run_number }}
          path: packages/
          
      - name: 'üéØ Configure Target Feed'
        id: feed-config
        run: |
          echo "::group::üéØ Configuring target feed settings"
          
          case "${{ inputs.target-feed }}" in
            "nuget-org")
              FEED_URL="https://api.nuget.org/v3/index.json"
              FEED_NAME="NuGet.org"
              API_KEY_SECRET="NUGET_API_KEY"
              REQUIRES_APPROVAL=true
              ALLOW_PRERELEASE=false
              ;;
            "github-packages")
              FEED_URL="https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
              FEED_NAME="GitHub Packages"
              API_KEY_SECRET="GITHUB_TOKEN"
              REQUIRES_APPROVAL=false
              ALLOW_PRERELEASE=true
              ;;
            "private-feed")
              FEED_URL="${{ vars.PRIVATE_FEED_URL }}"
              FEED_NAME="Private Feed"
              API_KEY_SECRET="PRIVATE_FEED_KEY"
              REQUIRES_APPROVAL=false
              ALLOW_PRERELEASE=true
              ;;
            *)
              echo "‚ùå Unknown target feed: ${{ inputs.target-feed }}"
              exit 1
              ;;
          esac
          
          echo "feed-url=$FEED_URL" >> $GITHUB_OUTPUT
          echo "feed-name=$FEED_NAME" >> $GITHUB_OUTPUT
          echo "api-key-secret=$API_KEY_SECRET" >> $GITHUB_OUTPUT
          echo "requires-approval=$REQUIRES_APPROVAL" >> $GITHUB_OUTPUT
          echo "allow-prerelease=$ALLOW_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "üìä Feed Configuration:"
          echo "- Target: $FEED_NAME"
          echo "- URL: $FEED_URL"
          echo "- Requires Approval: $REQUIRES_APPROVAL"
          echo "- Allow Prerelease: $ALLOW_PRERELEASE"
          echo "- Dry Run: ${{ inputs.dry-run }}"
          
          echo "::endgroup::"
          
      - name: 'üìã Analyze Packages'
        id: package-analysis
        run: |
          echo "::group::üìã Analyzing packages for publishing"
          
          PACKAGE_COUNT=0
          PACKAGES_INFO=""
          TOTAL_SIZE=0
          
          for package in packages/*.nupkg; do
            if [[ ! -f "$package" ]]; then
              continue
            fi
            
            PACKAGE_COUNT=$((PACKAGE_COUNT + 1))
            PACKAGE_NAME=$(basename "$package")
            PACKAGE_SIZE=$(stat -c%s "$package")
            TOTAL_SIZE=$((TOTAL_SIZE + PACKAGE_SIZE))
            
            # Extract package info
            unzip -q "$package" -d "temp_extract_$(basename "$package" .nupkg)" || true
            
            if [[ -f "temp_extract_$(basename "$package" .nupkg)/*.nuspec" ]]; then
              NUSPEC_FILE=$(find "temp_extract_$(basename "$package" .nupkg)" -name "*.nuspec" | head -1)              VERSION=$(grep -oP '(?<=<version>)[^<]+' "$NUSPEC_FILE" || echo "unknown")
              PACKAGE_ID=$(grep -oP '(?<=<id>)[^<]+' "$NUSPEC_FILE" || echo "unknown")
            else
              VERSION="unknown"
              PACKAGE_ID="unknown"
            fi
            
            echo "üì¶ $PACKAGE_NAME"
            echo "   - ID: $PACKAGE_ID"
            echo "   - Version: $VERSION"
            echo "   - Size: $(numfmt --to=iec --suffix=B $PACKAGE_SIZE)"
            
            if [[ -z "$PACKAGES_INFO" ]]; then
              PACKAGES_INFO="$PACKAGE_ID:$VERSION:$PACKAGE_SIZE"
            else
              PACKAGES_INFO="$PACKAGES_INFO,$PACKAGE_ID:$VERSION:$PACKAGE_SIZE"
            fi
            
            # Cleanup temp directory
            rm -rf "temp_extract_$(basename "$package" .nupkg)"
          done
          
          echo "package-count=$PACKAGE_COUNT" >> $GITHUB_OUTPUT
          echo "packages-info=$PACKAGES_INFO" >> $GITHUB_OUTPUT
          echo "total-size=$TOTAL_SIZE" >> $GITHUB_OUTPUT
          
          if [[ $PACKAGE_COUNT -eq 0 ]]; then
            echo "‚ùå No packages found for publishing"
            exit 1
          fi
          
          echo "üìä Publishing Summary:"
          echo "- Packages: $PACKAGE_COUNT"
          echo "- Total Size: $(numfmt --to=iec --suffix=B $TOTAL_SIZE)"
          echo "- Strategy: ${{ inputs.package-strategy }}"
          
          echo "::endgroup::"
          
      - name: 'üîê Validate Feed Access'
        if: ${{ !inputs.dry-run }}
        run: |
          echo "::group::üîê Validating feed access and authentication"
          
          case "${{ inputs.target-feed }}" in
            "nuget-org")
              if [[ -z "${{ secrets.NUGET_API_KEY }}" ]]; then
                echo "‚ùå NUGET_API_KEY secret not configured"
                exit 1
              fi
              echo "‚úÖ NuGet.org API key configured"
              ;;
            "github-packages")
              if [[ -z "${{ secrets.GITHUB_TOKEN }}" ]]; then
                echo "‚ùå GITHUB_TOKEN not available"
                exit 1
              fi
              echo "‚úÖ GitHub token configured"
              ;;
            "private-feed")
              if [[ -z "${{ secrets.PRIVATE_FEED_KEY }}" ]]; then
                echo "‚ùå PRIVATE_FEED_KEY secret not configured"
                exit 1
              fi
              echo "‚úÖ Private feed key configured"
              ;;
          esac
          
          # Test feed connectivity
          echo "üîó Testing feed connectivity..."
          if curl -sf "${{ steps.feed-config.outputs.feed-url }}" > /dev/null; then
            echo "‚úÖ Feed is accessible"
          else
            echo "‚ö†Ô∏è Feed connectivity test failed (may be normal for some feeds)"
          fi
          
          echo "::endgroup::"
          
      - name: 'üöÄ Publish Packages'
        id: publish-packages
        run: |
          echo "::group::üöÄ Publishing packages to ${{ steps.feed-config.outputs.feed-name }}"
          
          PUBLISHED_COUNT=0
          FAILED_COUNT=0
          PUBLISHED_VERSION=""
          PUBLISH_RESULTS=""
          
          for package in packages/*.nupkg; do
            if [[ ! -f "$package" ]]; then
              continue
            fi
            
            PACKAGE_NAME=$(basename "$package")
            echo "üì¶ Processing: $PACKAGE_NAME"
            
            if [[ "${{ inputs.dry-run }}" == "true" ]]; then
              echo "üîç DRY RUN: Would publish $PACKAGE_NAME to ${{ steps.feed-config.outputs.feed-name }}"
              PUBLISHED_COUNT=$((PUBLISHED_COUNT + 1))
                # Extract version for dry run
              if [[ -z "$PUBLISHED_VERSION" ]]; then
                unzip -q "$package" -d "temp_version_extract" || true
                if [[ -f temp_version_extract/*.nuspec ]]; then
                  NUSPEC_FILE=$(find temp_version_extract -name "*.nuspec" | head -1)
                  PUBLISHED_VERSION=$(grep -oP '(?<=<version>)[^<]+' "$NUSPEC_FILE" || echo "unknown")
                fi
                rm -rf temp_version_extract
              fi
            else
              # Actual publishing
              case "${{ inputs.target-feed }}" in
                "nuget-org")
                  API_KEY="${{ secrets.NUGET_API_KEY }}"
                  ;;
                "github-packages")
                  API_KEY="${{ secrets.GITHUB_TOKEN }}"
                  ;;
                "private-feed")
                  API_KEY="${{ secrets.PRIVATE_FEED_KEY }}"
                  ;;
              esac
              
              if dotnet nuget push "$package" \
                --source "${{ steps.feed-config.outputs.feed-url }}" \
                --api-key "$API_KEY" \
                --timeout 300 \
                --skip-duplicate; then
                echo "‚úÖ Successfully published: $PACKAGE_NAME"
                PUBLISHED_COUNT=$((PUBLISHED_COUNT + 1))
                  # Extract version from successful publish
                if [[ -z "$PUBLISHED_VERSION" ]]; then
                  unzip -q "$package" -d "temp_success_extract" || true
                  if [[ -f temp_success_extract/*.nuspec ]]; then
                    NUSPEC_FILE=$(find temp_success_extract -name "*.nuspec" | head -1)
                    PUBLISHED_VERSION=$(grep -oP '(?<=<version>)[^<]+' "$NUSPEC_FILE" || echo "unknown")
                  fi
                  rm -rf temp_success_extract
                fi
              else
                echo "‚ùå Failed to publish: $PACKAGE_NAME"
                FAILED_COUNT=$((FAILED_COUNT + 1))
              fi
            fi
            
            PUBLISH_STATUS=$([[ $? -eq 0 ]] && echo 'success' || echo 'failed')
            if [[ -z "$PUBLISH_RESULTS" ]]; then
              PUBLISH_RESULTS="$PACKAGE_NAME:$PUBLISH_STATUS"
            else
              PUBLISH_RESULTS="$PUBLISH_RESULTS,$PACKAGE_NAME:$PUBLISH_STATUS"
            fi
          done
          
          echo "published-count=$PUBLISHED_COUNT" >> $GITHUB_OUTPUT
          echo "failed-count=$FAILED_COUNT" >> $GITHUB_OUTPUT
          echo "published-version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
          echo "publish-results=$PUBLISH_RESULTS" >> $GITHUB_OUTPUT
          
          echo "üìä Publishing Results:"
          echo "- Published: $PUBLISHED_COUNT"
          echo "- Failed: $FAILED_COUNT"
          echo "- Version: $PUBLISHED_VERSION"
          
          if [[ $FAILED_COUNT -gt 0 ]] && [[ "${{ inputs.dry-run }}" != "true" ]]; then
            echo "‚ùå Some packages failed to publish"
            exit 1
          fi
          
          echo "::endgroup::"
          
      - name: 'üßπ Cleanup Old Packages'
        id: cleanup-packages
        if: ${{ inputs.cleanup-old-packages && !inputs.dry-run && inputs.target-feed == 'github-packages' }}
        run: |
          echo "::group::üßπ Cleaning up old package versions"
          
          # GitHub Packages cleanup (other feeds would need different approaches)
          CLEANUP_COUNT=0
          CLEANUP_RESULTS="not-supported"
          
          if [[ "${{ inputs.target-feed }}" == "github-packages" ]]; then
            echo "üîç Fetching package versions from GitHub Packages..."
            
            # Extract package ID from the first successful package
            FIRST_PACKAGE=$(echo "${{ steps.package-analysis.outputs.packages-info }}" | cut -d',' -f1)
            PACKAGE_ID=$(echo "$FIRST_PACKAGE" | cut -d':' -f1)
            
            echo "üì¶ Checking versions for package: $PACKAGE_ID"
            
            # This would require GitHub API calls to list and delete old versions
            # For now, we'll simulate the cleanup
            if [[ "${{ inputs.dry-run }}" == "true" ]]; then
              echo "üîç DRY RUN: Would cleanup old versions of $PACKAGE_ID (keeping ${{ inputs.package-retention }})"
              CLEANUP_COUNT=3
              CLEANUP_RESULTS="dry-run-simulated"
            else
              echo "‚ö†Ô∏è GitHub Packages cleanup requires additional API permissions"
              echo "üí° Consider implementing with GitHub CLI or API calls"
              CLEANUP_RESULTS="requires-implementation"
            fi
          else
            echo "‚è≠Ô∏è Cleanup not supported for ${{ inputs.target-feed }}"
            CLEANUP_RESULTS="not-supported-for-feed"
          fi
          
          echo "cleanup-count=$CLEANUP_COUNT" >> $GITHUB_OUTPUT
          echo "cleanup-results=$CLEANUP_RESULTS" >> $GITHUB_OUTPUT
          
          echo "üìä Cleanup Results: $CLEANUP_RESULTS"
          
          echo "::endgroup::"
          
      - name: '‚úÖ Verify Publishing'
        id: verify-publishing
        if: ${{ inputs.verify-publishing && !inputs.dry-run }}
        run: |
          echo "::group::‚úÖ Verifying published packages"
          
          VERIFICATION_PASSED=true
          VERIFICATION_RESULTS=""
          
          # Extract first package info for verification
          FIRST_PACKAGE=$(echo "${{ steps.package-analysis.outputs.packages-info }}" | cut -d',' -f1)
          PACKAGE_ID=$(echo "$FIRST_PACKAGE" | cut -d':' -f1)
          PACKAGE_VERSION=$(echo "$FIRST_PACKAGE" | cut -d':' -f2)
          
          echo "üîç Verifying package: $PACKAGE_ID version $PACKAGE_VERSION"
          
          # Give the feed some time to propagate
          echo "‚è±Ô∏è Waiting 30 seconds for feed propagation..."
          sleep 30
          
          case "${{ inputs.target-feed }}" in
            "nuget-org")
              # Check NuGet.org
              if curl -sf "https://api.nuget.org/v3-flatcontainer/$PACKAGE_ID/$PACKAGE_VERSION/$PACKAGE_ID.$PACKAGE_VERSION.nupkg" > /dev/null; then
                echo "‚úÖ Package verified on NuGet.org"
                VERIFICATION_RESULTS="verified-nuget-org"
              else
                echo "‚ö†Ô∏è Package not yet available on NuGet.org (may take time to propagate)"
                VERIFICATION_RESULTS="propagation-pending"
              fi
              ;;
            "github-packages")
              # Check GitHub Packages using search
              if dotnet nuget search "$PACKAGE_ID" --source "${{ steps.feed-config.outputs.feed-url }}" --exact-match > /dev/null 2>&1; then
                echo "‚úÖ Package verified on GitHub Packages"
                VERIFICATION_RESULTS="verified-github-packages"
              else
                echo "‚ö†Ô∏è Package verification failed for GitHub Packages"
                VERIFICATION_PASSED=false
                VERIFICATION_RESULTS="verification-failed"
              fi
              ;;
            "private-feed")
              echo "üîç Private feed verification requires custom implementation"
              VERIFICATION_RESULTS="requires-custom-verification"
              ;;
          esac
          
          echo "verification-passed=$VERIFICATION_PASSED" >> $GITHUB_OUTPUT
          echo "verification-results=$VERIFICATION_RESULTS" >> $GITHUB_OUTPUT
          
          echo "üìä Verification: $VERIFICATION_RESULTS"
          
          if [[ "$VERIFICATION_PASSED" != "true" ]] && [[ "$VERIFICATION_RESULTS" == "verification-failed" ]]; then
            echo "‚ùå Package verification failed"
            exit 1
          fi
          
          echo "::endgroup::"
          
      - name: 'üìä Publishing Summary'
        run: |
          echo "## üöÄ Package Publishing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Strategy**: ${{ inputs.package-strategy }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Feed**: ${{ steps.feed-config.outputs.feed-name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Published Version**: ${{ steps.publish-packages.outputs.published-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run**: ${{ inputs.dry-run && '‚úÖ Yes' || '‚ùå No' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üì¶ Package Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Count**: ${{ steps.package-analysis.outputs.package-count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Size**: $(numfmt --to=iec --suffix=B ${{ steps.package-analysis.outputs.total-size }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Published**: ${{ steps.publish-packages.outputs.published-count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed**: ${{ steps.publish-packages.outputs.failed-count }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ inputs.cleanup-old-packages }}" == "true" ]]; then
            echo "### üßπ Cleanup Results" >> $GITHUB_STEP_SUMMARY
            echo "**Status**: ${{ steps.cleanup-packages.outputs.cleanup-results }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ inputs.verify-publishing }}" == "true" ]] && [[ "${{ inputs.dry-run }}" != "true" ]]; then
            echo "### ‚úÖ Verification Results" >> $GITHUB_STEP_SUMMARY
            echo "**Status**: ${{ steps.verify-publishing.outputs.verification-results }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          case "${{ inputs.package-strategy }}" in
            "release")
              echo "üöÄ **Production packages** have been published successfully." >> $GITHUB_STEP_SUMMARY
              ;;
            "preview")
              echo "üîç **Preview packages** are now available for testing." >> $GITHUB_STEP_SUMMARY
              ;;
            "debug-release")
              echo "üîß **Debug packages** are available for development use." >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ inputs.dry-run }}" == "true" ]]; then
            echo "**Next Steps**: This was a dry run. Re-run with dry-run=false to actually publish packages." >> $GITHUB_STEP_SUMMARY
          else
            echo "**Next Steps**: Packages are now available on ${{ steps.feed-config.outputs.feed-name }}. Update consuming projects to use the new version." >> $GITHUB_STEP_SUMMARY
          fi