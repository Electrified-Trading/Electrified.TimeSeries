# üß™ Test-Focused Workflow
# Ultra-granular testing with comprehensive coverage reporting
# Part of the modular CI/CD architecture

name: 'üß™ Test Focus'

on:
  workflow_call:
    inputs:
      run-unit-tests:
        description: 'Run unit tests'
        required: false
        type: boolean
        default: true
      run-integration-tests:
        description: 'Run integration tests'
        required: false  
        type: boolean
        default: true
      run-performance-tests:
        description: 'Run performance tests'
        required: false
        type: boolean
        default: false
      collect-coverage:
        description: 'Collect code coverage'
        required: false
        type: boolean
        default: true
      coverage-threshold:
        description: 'Minimum code coverage percentage'
        required: false
        type: number
        default: 80
      upload-test-results:
        description: 'Upload test results as artifacts'
        required: false
        type: boolean
        default: true
      fail-on-coverage:
        description: 'Fail build if coverage below threshold'
        required: false
        type: boolean
        default: false
      test-configuration:
        description: 'Test configuration (Debug/Release)'
        required: false
        type: string
        default: 'Release'
        
  workflow_dispatch:
    inputs:
      run-unit-tests:
        description: 'Run unit tests'
        required: false
        type: boolean
        default: true
      run-integration-tests:
        description: 'Run integration tests'
        required: false
        type: boolean
        default: true
      run-performance-tests:
        description: 'Run performance tests'
        required: false
        type: boolean
        default: false
      collect-coverage:
        description: 'Collect code coverage'
        required: false
        type: boolean
        default: true
      coverage-threshold:
        description: 'Minimum code coverage percentage'
        required: false
        type: number
        default: 80
      upload-test-results:
        description: 'Upload test results as artifacts'
        required: false
        type: boolean
        default: true
      fail-on-coverage:
        description: 'Fail build if coverage below threshold'
        required: false
        type: boolean
        default: false
      test-configuration:
        description: 'Test configuration (Debug/Release)'
        required: false
        type: string
        default: 'Release'

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  test-execution:
    name: 'üß™ Execute Tests'
    runs-on: ubuntu-latest
    
    outputs:
      unit-test-results: ${{ steps.unit-tests.outputs.test-results }}
      integration-test-results: ${{ steps.integration-tests.outputs.test-results }}
      performance-test-results: ${{ steps.performance-tests.outputs.test-results }}
      coverage-percentage: ${{ steps.coverage.outputs.coverage-percentage }}
      coverage-passed: ${{ steps.coverage.outputs.coverage-passed }}
      
    steps:
      - name: 'üì• Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: '‚öôÔ∏è Setup .NET'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          
      - name: 'üì¶ Restore Dependencies'
        run: |
          echo "::group::üì¶ Restoring NuGet packages"
          dotnet restore --verbosity minimal
          echo "::endgroup::"
          
      - name: 'üî® Build for Testing'
        run: |
          echo "::group::üî® Building solution for testing"
          dotnet build --configuration ${{ inputs.test-configuration }} --no-restore --verbosity minimal
          echo "::endgroup::"
          
      - name: 'üß™ Run Unit Tests'
        id: unit-tests
        if: inputs.run-unit-tests
        run: |
          echo "::group::üß™ Executing unit tests"
          
          # Run unit tests with detailed output
          dotnet test \
            --configuration ${{ inputs.test-configuration }} \
            --no-build \
            --verbosity normal \
            --logger "trx;LogFileName=unit-tests.trx" \
            --filter "Category!=Integration&Category!=Performance" \
            ${{ inputs.collect-coverage && '--collect:"XPlat Code Coverage"' || '' }} \
            ${{ inputs.collect-coverage && '--settings coverlet.runsettings' || '' }}
            
          # Capture test results
          if [ -f "TestResults/unit-tests.trx" ]; then
            echo "test-results=passed" >> $GITHUB_OUTPUT
            echo "‚úÖ Unit tests completed successfully"
          else
            echo "test-results=failed" >> $GITHUB_OUTPUT
            echo "‚ùå Unit tests failed or no results found"
          fi
          
          echo "::endgroup::"
          
      - name: 'üîó Run Integration Tests'  
        id: integration-tests
        if: inputs.run-integration-tests
        run: |
          echo "::group::üîó Executing integration tests"
          
          # Run integration tests
          dotnet test \
            --configuration ${{ inputs.test-configuration }} \
            --no-build \
            --verbosity normal \
            --logger "trx;LogFileName=integration-tests.trx" \
            --filter "Category=Integration" \
            ${{ inputs.collect-coverage && '--collect:"XPlat Code Coverage"' || '' }} \
            ${{ inputs.collect-coverage && '--settings coverlet.runsettings' || '' }}
            
          # Capture test results
          if [ -f "TestResults/integration-tests.trx" ]; then
            echo "test-results=passed" >> $GITHUB_OUTPUT
            echo "‚úÖ Integration tests completed successfully"
          else
            echo "test-results=failed" >> $GITHUB_OUTPUT
            echo "‚ùå Integration tests failed or no results found"
          fi
          
          echo "::endgroup::"
          
      - name: '‚ö° Run Performance Tests'
        id: performance-tests
        if: inputs.run-performance-tests
        run: |
          echo "::group::‚ö° Executing performance tests"
          
          # Run performance tests
          dotnet test \
            --configuration ${{ inputs.test-configuration }} \
            --no-build \
            --verbosity normal \
            --logger "trx;LogFileName=performance-tests.trx" \
            --filter "Category=Performance"
            
          # Capture test results
          if [ -f "TestResults/performance-tests.trx" ]; then
            echo "test-results=passed" >> $GITHUB_OUTPUT
            echo "‚úÖ Performance tests completed successfully"
          else
            echo "test-results=failed" >> $GITHUB_OUTPUT
            echo "‚ùå Performance tests failed or no results found"  
          fi
          
          echo "::endgroup::"
          
      - name: 'üìä Process Code Coverage'
        id: coverage
        if: inputs.collect-coverage
        run: |
          echo "::group::üìä Processing code coverage"
          
          # Install ReportGenerator
          dotnet tool install -g dotnet-reportgenerator-globaltool
          
          # Generate coverage report
          reportgenerator \
            -reports:"**/coverage.cobertura.xml" \
            -targetdir:"CoverageReport" \
            -reporttypes:"Html;Cobertura;TextSummary"
            
          # Extract coverage percentage
          if [ -f "CoverageReport/Summary.txt" ]; then
            COVERAGE=$(grep -oP "Line coverage: \K[0-9.]+" CoverageReport/Summary.txt)
            echo "coverage-percentage=$COVERAGE" >> $GITHUB_OUTPUT
            echo "üìä Code coverage: $COVERAGE%"
            
            # Check coverage threshold
            if (( $(echo "$COVERAGE >= ${{ inputs.coverage-threshold }}" | bc -l) )); then
              echo "coverage-passed=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Coverage threshold met ($COVERAGE% >= ${{ inputs.coverage-threshold }}%)"
            else
              echo "coverage-passed=false" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è Coverage below threshold ($COVERAGE% < ${{ inputs.coverage-threshold }}%)"
              
              if [[ "${{ inputs.fail-on-coverage }}" == "true" ]]; then
                echo "‚ùå Failing build due to coverage threshold"
                exit 1
              fi
            fi
          else
            echo "coverage-percentage=0" >> $GITHUB_OUTPUT
            echo "coverage-passed=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No coverage data found"
          fi
          
          echo "::endgroup::"
          
      - name: 'üì§ Upload Test Results'
        if: inputs.upload-test-results && always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: |
            TestResults/**/*.trx
            CoverageReport/**/*
          retention-days: 30
          if-no-files-found: warn
          
      - name: 'üìã Test Summary'
        if: always()
        run: |
          echo "## üß™ Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Unit Tests Summary
          if [[ "${{ inputs.run-unit-tests }}" == "true" ]]; then
            if [[ "${{ steps.unit-tests.outputs.test-results }}" == "passed" ]]; then
              echo "‚úÖ **Unit Tests**: Passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå **Unit Tests**: Failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚è≠Ô∏è **Unit Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Integration Tests Summary
          if [[ "${{ inputs.run-integration-tests }}" == "true" ]]; then
            if [[ "${{ steps.integration-tests.outputs.test-results }}" == "passed" ]]; then
              echo "‚úÖ **Integration Tests**: Passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå **Integration Tests**: Failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚è≠Ô∏è **Integration Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Performance Tests Summary
          if [[ "${{ inputs.run-performance-tests }}" == "true" ]]; then
            if [[ "${{ steps.performance-tests.outputs.test-results }}" == "passed" ]]; then
              echo "‚úÖ **Performance Tests**: Passed" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå **Performance Tests**: Failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚è≠Ô∏è **Performance Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Coverage Summary
          if [[ "${{ inputs.collect-coverage }}" == "true" ]]; then
            COVERAGE="${{ steps.coverage.outputs.coverage-percentage }}"
            THRESHOLD="${{ inputs.coverage-threshold }}"
            
            if [[ "${{ steps.coverage.outputs.coverage-passed }}" == "true" ]]; then
              echo "‚úÖ **Code Coverage**: $COVERAGE% (‚â• $THRESHOLD%)" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ö†Ô∏è **Code Coverage**: $COVERAGE% (< $THRESHOLD%)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚è≠Ô∏è **Code Coverage**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Configuration**: ${{ inputs.test-configuration }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY

  test-reporting:
    name: 'üìä Test Reporting'
    runs-on: ubuntu-latest
    needs: test-execution
    if: always() && inputs.upload-test-results
    
    steps:
      - name: 'üì• Download Test Results'
        uses: actions/download-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: test-results
          
      - name: 'üìä Publish Test Results'
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: 'Test Results'
          path: 'test-results/**/*.trx'
          reporter: dotnet-trx
          fail-on-error: false
          
      - name: 'üìà Coverage Comment'
        if: inputs.collect-coverage && github.event_name == 'pull_request'
        run: |
          COVERAGE="${{ needs.test-execution.outputs.coverage-percentage }}"
          
          cat > coverage-comment.md << EOF
          ## üìä Code Coverage Report
          
          **Coverage**: $COVERAGE%
          **Threshold**: ${{ inputs.coverage-threshold }}%
          **Status**: ${{ needs.test-execution.outputs.coverage-passed == 'true' && '‚úÖ Passed' || '‚ö†Ô∏è Below Threshold' }}
          
          Detailed coverage report is available in the test artifacts.
          EOF
          
          # TODO: Add PR comment capability when needed
          echo "Coverage comment prepared for PR #${{ github.event.number }}"