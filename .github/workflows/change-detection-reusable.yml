name: Smart Change Detection (Reusable)

on:
  workflow_call:
    inputs:
      project-path:
        description: 'Path to the .csproj file'
        required: false
        type: string
        default: 'source/Electrified.TimeSeries/Electrified.TimeSeries.csproj'
      comparison-script:
        description: 'Path to the build output comparison script'
        required: false
        type: string
        default: 'scripts/compare-build-output-v4.ps1'
      dotnet-version:
        description: '.NET version to use'
        required: false
        type: string
        default: '9.0.x'
    outputs:
      has-changes:
        description: 'Whether functional changes were detected'
        value: ${{ jobs.detect-changes.outputs.has-changes }}
      comparison-details:
        description: 'Details about the comparison performed'
        value: ${{ jobs.detect-changes.outputs.comparison-details }}
      previous-reference:
        description: 'The git reference used for comparison'
        value: ${{ jobs.detect-changes.outputs.previous-reference }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    
    outputs:
      has-changes: ${{ steps.change-detection.outputs.has-changes }}
      comparison-details: ${{ steps.change-detection.outputs.details }}
      previous-reference: ${{ steps.change-detection.outputs.reference }}
    
    steps:
    - name: Checkout Code with Full History
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Need full history for git tag operations

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Find Previous Reference Point
      id: find-reference
      run: |
        echo "🔍 Looking for previous reference point for comparison..."
        
        # TODO: In the future, this should track "previous successful publish"
        # For now, we use the latest git tag as a fallback
        latestTag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$latestTag" ]; then
          echo "📝 No previous tags found - this will be the first release"
          echo "reference=" >> $GITHUB_OUTPUT
          echo "type=first-release" >> $GITHUB_OUTPUT
        else
          echo "🏷️ Found latest tag: $latestTag"
          echo "reference=$latestTag" >> $GITHUB_OUTPUT
          echo "type=tag-comparison" >> $GITHUB_OUTPUT
        fi

    - name: Smart Change Detection
      id: change-detection
      run: |
        reference="${{ steps.find-reference.outputs.reference }}"
        type="${{ steps.find-reference.outputs.type }}"
        
        echo "reference=$reference" >> $GITHUB_OUTPUT
        
        if [ "$type" = "first-release" ]; then
          echo "📦 First release scenario - no previous publish to compare against"
          echo "✅ Will publish package for initial release"
          echo "has-changes=true" >> $GITHUB_OUTPUT
          echo "details=First release - no previous reference point" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Check if comparison script exists
        scriptPath="${{ inputs.comparison-script }}"
        if [ ! -f "$scriptPath" ]; then
          echo "⚠️ Build output comparison script not found at: $scriptPath"
          echo "📦 Assuming changes exist to be safe"
          echo "has-changes=true" >> $GITHUB_OUTPUT
          echo "details=Comparison script missing - failing safe" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "🔍 Running intelligent build output comparison..."
        echo "📁 Project: ${{ inputs.project-path }}"
        echo "🏷️ Comparing against: $reference"
        echo "🛠️ Using script: $scriptPath"
        
        # Execute the build output comparison
        set +e # Don't exit on non-zero exit codes
        pwsh "$scriptPath" -ProjectPath "${{ inputs.project-path }}" -TagName "$reference" -OutputDir "change-detection-temp"
        exitCode=$?
        set -e
        
        case $exitCode in
          0)
            echo "✅ Build output comparison completed successfully"
            echo "⏭️ No functional changes detected - will skip package publishing"
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "details=No functional changes detected via build output comparison" >> $GITHUB_OUTPUT
            ;;
          1)
            echo "🔄 Functional changes detected in build output"
            echo "📦 Will create and publish new package version"
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "details=Functional changes detected via build output comparison" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "⚠️ Build output comparison failed with exit code: $exitCode"
            echo "📦 Assuming changes exist to be safe (fail-safe behavior)"
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "details=Comparison failed (exit code $exitCode) - failing safe" >> $GITHUB_OUTPUT
            ;;
        esac
      shell: bash

    - name: Change Detection Summary
      run: |
        echo "## Smart Change Detection Results" >> $GITHUB_STEP_SUMMARY
        echo "| Aspect | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Reference Point | ${{ steps.change-detection.outputs.reference || 'None (first release)' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Changes Detected | ${{ steps.change-detection.outputs.has-changes == 'true' && '✅ Yes' || '⏭️ No' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Decision | ${{ steps.change-detection.outputs.has-changes == 'true' && '📦 Publish Package' || '⏭️ Skip Publishing' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Details | ${{ steps.change-detection.outputs.details }} |" >> $GITHUB_STEP_SUMMARY
        
        echo ""
        echo "### Algorithm Used"
        echo "1. 🏗️ Build current code → create zip of bin/Debug output"
        echo "2. 🔄 Checkout reference point → build that code → create zip"
        echo "3. 🔍 Compare SHA256 hashes of the two zip files"
        echo "4. 📊 If hashes match → No Changes → Skip Publishing"
        echo "5. 📊 If hashes differ → Changes Detected → Publish Package"
